"""An implementation of linear search."""
from searching.complexity import Complexity
from searching.types import Sequence, Number, OptionalNumber
from ..sequence_search_algorithm import SequenceSearchAlgorithm


class LinearSearch(SequenceSearchAlgorithm):
	"""An implementation of the linear search algorithm."""

	@property
	def runtime_complexity(self) -> Complexity:
		"""Return the runtime complexity for the algorithm."""
		return Complexity(worst='O(n)', avg='Θ(n)', best='Ω(1)')

	@property
	def space_complexity(self) -> Complexity:
		"""Return the runtime complexity for the algorithm."""
		return Complexity(worst='O(1)')

	def __call__(self, numbers: Sequence, target: Number) -> OptionalNumber:
		"""
		Search for the target value in the sequence of numbers.

		Args:
			numbers: the sequence of numbers to search through
			target: the number to find in the sequence

		Returns: the index of the number if found, None otherwise
		"""
		# iterate over the index, value pairings in the sequence
		for index, number in enumerate(numbers):
			# if the current number is equal to the target
			if number == target:
				# return the index associated with the target
				return index
		# target not found in the sequence, return None
		return None


# explicitly define the public API of the module
__all__ = ['LinearSearch']
