"""An implementation of binary search."""
from searching.complexity import Complexity
from searching.types import Sequence, Number, OptionalNumber
from ..sequence_search_algorithm import SortedSequenceSearchAlgorithm


class BinarySearch(SortedSequenceSearchAlgorithm):
	"""
	An implementation of the binary search algorithm.

	Tek:
		1. sort the items in the sequence
		2. take the midpoint and compare to the target
		3. recurse on the half that contains the target until
			-   end of tree (not found)
			-   equal value found (return index)
	"""

	@property
	def runtime_complexity(self) -> Complexity:
		"""Return the runtime complexity for the algorithm."""
		return Complexity(worst='O(lg n)', avg='Θ(lg n)', best='Ω(1)')

	@property
	def space_complexity(self) -> Complexity:
		"""Return the runtime complexity for the algorithm."""
		return Complexity(worst='O(lg n)', avg='Θ(lg n)', best=('Ω(1)'))

	def _search(self, numbers: Sequence, target: Number,
				left: int, right: int) -> OptionalNumber:
		"""
		Search for the target recursively in the list of numbers.

		Args:
			numbers: the array of SORTED numbers to search in
			target: the number to find in the array
			left: the left bound index of the array
			right: the right bound index of the array

		Returns: the index of the target in numbers
		"""
		# check the base case
		if right < left:
			return None
		# take the average of left and right then floor it using int
		midpoint = int((left + right) / 2)
		# check if we found the target
		if numbers[midpoint] == target:
			return midpoint
		# check which side of the list to recurse on
		elif numbers[midpoint] < target:
			return self._search(numbers, target, midpoint + 1, right)
		else:
			return self._search(numbers, target, left, midpoint - 1)

	def __call__(self, numbers: Sequence, target: Number) -> OptionalNumber:
		"""
		Search for the target value in the sequence of numbers.

		Args:
			numbers: the sequence of numbers to search through
			target: the number to find in the sequence

		Returns: the index of the number if found, None otherwise

		Note: If sorting is disabled for this algorithm, the input numbers is
			  expected to be sorted.
		"""
		# sort the numbers
		numbers = self.sort(numbers)
		# make sure the target is within the bounds of the sorted array
		if not self.is_in_bounds(numbers, target):
			return None
		# start the recursion tree on the numbers with the left set to the
		# starting left index (0) and the right set to the far right
		# index (length - 1).
		return self._search(numbers, target, 0, len(numbers) - 1)


# explicitly define the public API of the module
__all__ = ['BinarySearch']
