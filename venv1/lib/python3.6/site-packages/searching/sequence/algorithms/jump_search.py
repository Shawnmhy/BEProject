"""An implementation of jump search."""
from searching.complexity import Complexity
from searching.types import Sequence, Number, OptionalNumber
from ..sequence_search_algorithm import SortedSequenceSearchAlgorithm


class JumpSearch(SortedSequenceSearchAlgorithm):
	"""
	An implementation of the jump search algorithm.

	Tek:
		1.  set a block size m. (m = sqrt(n) is proven optimal)
		2.  iterate from 0 by m steps until the value at numbers[m] is greater
		    than or equal to the tart
		3.  if equal return
		4.  if less, jump back to the last m delimiter and do linear search
	"""

	@property
	def runtime_complexity(self) -> Complexity:
		"""Return the runtime complexity for the algorithm."""
		return Complexity(worst='O(√n)', avg='Θ(√n)', best='Ω(1)')

	@property
	def space_complexity(self) -> Complexity:
		"""Return the runtime complexity for the algorithm."""
		return Complexity(worst='O(1)')

	def __call__(self, numbers: Sequence, target: Number) -> OptionalNumber:
		"""
		Search for the target value in the sequence of numbers.

		Args:
			numbers: the sequence of numbers to search through
			target: the number to find in the sequence

		Returns: the index of the number if found, None otherwise

		Note: If sorting is disabled for this algorithm, the input numbers is
			  expected to be sorted.
		"""
		# sort the numbers
		numbers = self.sort(numbers)
		# make sure the target is within the bounds of the sorted array
		if not self.is_in_bounds(numbers, target):
			return None
		# set the block size to the optimal: sqrt(n)
		# TODO: consider parameterizing this? (for science)
		block_size = int(len(numbers)**0.5)
		# iterate over the blocks in the array
		for block in range(block_size, len(numbers), block_size):
			# check if the number is inside the block to the left
			if numbers[block] >= target:
				# break the loop (block stays in memory for access)
				break
		# iterate over the block using standard linear search
		for index in range(block - block_size, block + 1):
			# if the current number is equal to the target
			if numbers[index] == target:
				# return the index associated with the target
				return index
		# not found, return none
		return None


# explicitly define the public API of the module
__all__ = ['JumpSearch']
