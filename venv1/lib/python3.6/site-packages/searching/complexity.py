"""A generalization of runtime / space complexity."""


# TODO: isnt there a Python feature that implements this boilerplate automatically?
class Complexity(object):
	"""A container for complexity analysis properties of algorithms."""

	def __init__(self, worst: str=None, avg: str=None, best: str=None) -> None:
		"""
		Initialize a new complexity with worst, avg, and best complexities.

		Args:
			worst: the worst case complexity for the algorithm
			avg: the avg case complexity for the algorithm
			best: the best case complexity for the algorithm

		Returns: None
		"""
		self.worst = worst
		self.avg = avg
		self.best = best

	def __repr__(self):
		"""Return a console friendly string of this complexity."""
		return f'{self.__class__.__name__}(worst="{self.worst}", avg="{self.avg}", best="{self.best}")'

	def __str__(self):
		"""Return a human friendly string of this complexity."""
		return f'worst: {self.worst}, avg: {self.avg}, best: {self.best}'


# explicitly define the public API of this module
__all__ = ['Complexity']
