"""Simple components for building graphs."""
from .base import Number


class Node(object):
	"""A node / vertex in a graph."""

	def __init__(self, data: any, key: any=None) -> None:
		"""
		Initialize a new node with given data and key.

		Args:
			data: the data the node houses
			key: sort key for subscripting elements from data (default None)

		Returns: None

		Note: data[key] must be defined if key is not None
		"""
		self.data = data
		self.key = key

	@property
	def comparable_data(self) -> Number:
		"""Return the comparable data from the internal data store."""
		# if there is no sort key, return the raw data as is
		if self.key is None:
			return self.data
		# use the sort key to subscript comparable data from the object
		return self.data[self.key]

	def __repr__(self):
		"""Return a Python string to create this object."""
		return f'{self.__class__.__name__}(data={self.data}, key={self.key})'

	def __str__(self):
		"""Return a human friendly string of this object."""
		return f'{self.__class__.__name__}: {self.data}'

	def __eq__(self, other: 'Node'):
		"""
		Return a boolean determining if self is equal to other.

		Args:
			other: the other Node to compare to

		Returns: self == other
		"""
		return self.comparable_data == other.comparable_data

	def __ne__(self, other: 'Node'):
		"""
		Return a boolean determining if self is not equal to other.

		Args:
			other: the other Node to compare to

		Returns: self != other
		"""
		return self.comparable_data != other.comparable_data

	def __lt__(self, other: 'Node'):
		"""
		Return a boolean determining if self is less than other.

		Args:
			other: the other Node to compare to

		Returns: self < other
		"""
		return self.comparable_data < other.comparable_data

	def __le__(self, other: 'Node'):
		"""
		Return a boolean determining if self is less than or equal to other.

		Args:
			other: the other Node to compare to

		Returns: self <= other
		"""
		return self.comparable_data <= other.comparable_data

	def __gt__(self, other: 'Node'):
		"""
		Return a boolean determining if self is greater than other.

		Args:
			other: the other Node to compare to

		Returns: self > other
		"""
		return self.comparable_data > other.comparable_data

	def __ge__(self, other: 'Node'):
		"""
		Return a boolean determining if self is greater than or equal to other.

		Args:
			other: the other Node to compare to

		Returns: self >= other
		"""
		return self.comparable_data >= other.comparable_data


class Edge(object):
	"""An edge connecting two nodes in a graph."""


class Graph(object):
	"""A graph of (nodes/vertices) (V) and edges (E)."""
