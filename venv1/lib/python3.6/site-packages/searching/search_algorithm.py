"""A generalization of a search algorithm."""
from abc import abstractmethod
from .complexity import Complexity


class SearchAlgorithm(object):
	"""
	An abstract base class for search algorithms.

    Tek:
        1.  iterate over the n items comparing to the target
        2.  return the index of an equal item or None if no item found
	"""

	def __repr__(self) -> str:
		"""Return a console friendly representation of this algorithm."""
		return f'{self.__class__.__name__}()'

	def __str__(self) -> str:
		"""Return a human friendly string of this algorithm."""
		return f'{self.__class__.__name__} - {self.runtime_complexity}'

	@property
	@abstractmethod
	def runtime_complexity(self) -> Complexity:
		"""Return the runtime complexity for the algorithm."""
		return None

	@property
	@abstractmethod
	def space_complexity(self) -> Complexity:
		"""Return the space complexity for the algorithm."""
		return None


# explicitly define the public API of this module
__all__ = ['SearchAlgorithm']
